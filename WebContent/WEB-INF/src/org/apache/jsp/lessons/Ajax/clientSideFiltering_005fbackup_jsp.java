/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2015-07-24 08:46:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.lessons.Ajax;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import javax.xml.xpath.*;
import org.xml.sax.InputSource;
import org.w3c.dom.*;
import org.apache.ecs.html.*;

public final class clientSideFiltering_005fbackup_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n    \r\n  \r\n    \r\n");
 

	String userId = request.getParameter("userID");


	NodeList nodes = null;
	
	

	File d = new File(this.getServletContext().getRealPath("lessons/Ajax/employees.xml"));
	
	if(d.exists()){
		System.out.print("File does exist");
	}
	else{
		System.out.print("File DOES NOT exist");
	}
	
	System.out.println(d.getAbsolutePath());
	XPathFactory factory = XPathFactory.newInstance();
	XPath xPath = factory.newXPath();
	InputSource inputSource = new InputSource(new FileInputStream(d));





	
	StringBuffer sb = new StringBuffer();
	
	sb.append("/Employees/Employee/UserID | ");
	sb.append("/Employees/Employee/FirstName | ");
	sb.append("/Employees/Employee/LastName | ");
	sb.append("/Employees/Employee/SSN | ");
	sb.append("/Employees/Employee/Salary ");
	
	String expression = sb.toString();
	
	
	System.out.print("expression:" + expression);



	nodes = (NodeList) xPath.evaluate(expression, inputSource,
	XPathConstants.NODESET);
	int nodesLength = nodes.getLength();

	
	System.out.println("nodesLength:" + nodesLength);

	TR tr;
	
	int COLUMNS = 5;
	
	Table t2 = null;
    if (nodesLength > 0)
    {
		t2 = new Table().setCellSpacing(0).setCellPadding(0).setBorder(
			1).setWidth("90%").setAlign("center");
		tr = new TR();	
		tr.addElement(new TD().addElement("UserID"));
		tr.addElement(new TD().addElement("First Name"));
		tr.addElement(new TD().addElement("Last Name"));
		tr.addElement(new TD().addElement("SSN"));
		tr.addElement(new TD().addElement("Salary"));
		t2.addElement(tr);
    }
    

    
    tr = new TR();
    
    for (int i = 0; i < nodesLength; i++)
    {
		Node node = nodes.item(i);
		
		if(i%COLUMNS==0){
			tr = new TR();
			tr.setID(node.getTextContent());
			//tr.setStyle("display: none");
		}
		
		tr.addElement(new TD().addElement(node.getTextContent()));
		
		if(i%COLUMNS==(COLUMNS-1)){
			t2.addElement(tr);		
		}
    }
    
    if(t2 != null){
   	 	out.println(t2.toString());
    }
    else{
    	out.println("No Results");
    }
    
    

    
	
	
	
	
	



      out.write("\r\n    \r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
